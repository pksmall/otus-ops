---
image: alpine:latest
.auto-deploy:
  image: "registry.gitlab.com/gitlab-org/cluster-integration/auto-deploy-image:v0.9.1"

variables:
  ROLLOUT_RESOURCE_TYPE: deployment

stages:
  - build
  - test
  - review
  - release
  - cleanup

build:
  stage: build
  only:
    - branches
  image: docker:git
  services:
    - docker:18.09.7-dind
  variables:
    DOCKER_DRIVER: overlay2
    CI_REGISTRY: 'registry.gitlab.korzhenko.info'
    CI_APPLICATION_REPOSITORY: $CI_REGISTRY/$CI_PROJECT_PATH
    CI_APPLICATION_TAG: $CI_COMMIT_REF_SLUG
    CI_CONTAINER_NAME: ci_job_build_${CI_JOB_ID}
  before_script:
    - >
      if ! docker info &>/dev/null; then
        if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
          export DOCKER_HOST='tcp://localhost:2375'
        fi
      fi
  script:
    # Building
    - echo "Building Dockerfile-based application..."
    - echo `git show --format="%h" HEAD | head -1` > build_info.txt
    - echo `git rev-parse --abbrev-ref HEAD` >> build_info.txt
    - docker build -t "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" .
    - >
      if [[ -n "$CI_REGISTRY_USER" ]]; then
        echo "Logging to GitLab Container Registry with CI credentials...for build"
        echo $CI_REGISTRY_USER
        docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
      fi
    - echo "Pushing to GitLab Container Registry..."
    - docker push "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"

test:
  image: python:3.6-alpine
  script:
    - pip install -r requirements.txt -r requirements-test.txt
    - python -m unittest discover -s tests/ | tee rspec.xml
  artifacts:
    paths:
      - rspec.xml
    reports:
      junit: rspec.xml
    when: always

release:
  stage: release
  image: docker
  services:
    - docker:18.09.7-dind
  variables:
    CI_REGISTRY: 'registry.gitlab.korzhenko.info'
    CI_APPLICATION_REPOSITORY: $CI_REGISTRY/$CI_PROJECT_PATH
    CI_APPLICATION_TAG: $CI_COMMIT_REF_SLUG
    CI_CONTAINER_NAME: ci_job_build_${CI_JOB_ID}
  before_script:
    - >
      if ! docker info &>/dev/null; then
        if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
          export DOCKER_HOST='tcp://localhost:2375'
        fi
      fi
  script:
    # Releasing
    - echo "Updating docker images ..."
    - >
      if [[ -n "$CI_REGISTRY_USER" ]]; then
        echo "Logging to GitLab Container Registry with CI credentials for release..."
        docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
      fi
    - docker pull "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"
    - docker tag "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" "$CI_APPLICATION_REPOSITORY:$CI_COMMIT_SHORT_SHA"
    - docker push "$CI_APPLICATION_REPOSITORY:$CI_COMMIT_SHORT_SHA"
    # latest is neede for feature flags
    - docker tag "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" "$CI_APPLICATION_REPOSITORY:latest"
    - docker push "$CI_APPLICATION_REPOSITORY:latest"
  only:
    - master

review:
  extends: .auto-deploy
  stage: review
  variables:
    host: $CI_COMMIT_REF_NAME-review.$KUBE_INGRESS_BASE_DOMAIN
    commonName: le-$CI_PROJECT_ID.$KUBE_INGRESS_BASE_DOMAIN
  environment:
    name: gks/$CI_COMMIT_REF_NAME
    url: http://$CI_COMMIT_REF_NAME-review.$KUBE_INGRESS_BASE_DOMAIN
  script:
    - echo "Clone deploy repository..."
    - git clone $CI_SERVER_URL/$CI_PROJECT_NAMESPACE/search_engine_deploy.git
    - cd search_engine_deploy
    - auto-deploy check_kube_domain
    - echo $KUBE_NAMESPACE
    - auto-deploy download_chart
    - auto-deploy ensure_namespace
    - auto-deploy initialize_tiller
    - kubectl describe namespace "$KUBE_NAMESPACE"
    #- auto-deploy delete
    #--dry-run
    # get $CI_COMMIT_REF_NAME tag for app image
    - HELM_UPGRADE_EXTRA_ARGS="--debug --set ui.service.host=${host} --set ui.service.commonName=${commonName} --set crawler.image.tag=$CI_COMMIT_REF_NAME" auto-deploy deploy
    - auto-deploy persist_environment_url
  artifacts:
    paths: [environment_url.txt]
  only:
    refs:
      - branches
    kubernetes: active
  except:
    - master

stop_review:
  extends: .auto-deploy
  stage: cleanup
  variables:
    GIT_STRATEGY: none
  environment:
    name: gks/$CI_COMMIT_REF_NAME
    action: stop
  when: manual
  allow_failure: true
  only:
    refs:
      - branches
    kubernetes: active
  except:
    - master
  script:
    - auto-deploy initialize_tiller
    - auto-deploy delete
